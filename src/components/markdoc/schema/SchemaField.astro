---
import { toTitleCase } from '@utils/string';
import type { CollectionEntry } from 'astro:content';
import { Icon } from 'astro-icon/components';

import { formatText } from './util';

interface Props {
  field: CollectionEntry<'json_structures'>['data']['fields'][number];
  frontmatter: CollectionEntry<'wiki'>['data'];
  depth?: number;
}

const { field, frontmatter, depth = 0 } = Astro.props;

let key: string;
if (field.type === 'array' || field.type === 'array_primitive') {
  key = `${field.key}[]`;
} else {
  key = field.key;
}

let type: string;
if (field.type === 'primitive') {
  type = field.primitive.map((type) => toTitleCase(type)).join(', ');
} else if (field.type === 'object') {
  type = 'Object';
} else if (field.type === 'array') {
  type = 'Array (Objects)';
} else {
  type = `Array (${field.primitive.map((type) => toTitleCase(type) + 's').join(', ')})`;
}

let def: string | number | boolean | undefined;
if (field.type === 'primitive') {
  def = field.default;
} else if (field.type === 'array_primitive') {
  def = field.default ? `[${field.default?.join(', ')}]` : undefined;
}

const optional = def !== undefined ? true : field.optional;

const description = await formatText(field.description, frontmatter);
---

<tr>
  <td style={{ whiteSpace: 'nowrap' }}>
    {
      Array.from({ length: depth }, (_, i) => (
        <Icon
          name="material-symbols-light:subdirectory-arrow-right-rounded"
          color={i === depth - 1 ? undefined : 'transparent'}
        />
      ))
    }
    <code>{key} {!optional && '*'}</code>
  </td>
  <td>{type}</td>
  <td>{def !== undefined && <code>{def.toString()}</code>}</td>
  <td><Fragment set:html={description} /></td>
</tr>

{
  'children' in field &&
    field.children.map((subField) => <Astro.self field={subField} frontmatter={frontmatter} depth={depth + 1} />)
}
