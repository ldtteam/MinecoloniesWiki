---
import { createMarkdownProcessor } from '@astrojs/markdown-remark';
import InternalContentBlock from '@components/markdoc/content/InternalContentBlock.astro';
import { getBuildingData } from '@utils/building';
import { Image } from 'astro:assets';

import type { BaseContentBlockProps } from './types';

interface Props extends BaseContentBlockProps {
  header?: string;
  imageKey: string;
  imageAlt: string;
  markdownContent?: string;
}

const TAB_INDEXES = ['first', 'second', 'third', 'fourth', 'fifth', 'sixth', 'seventh', 'eight', 'ninth', 'tenth'];

const { name, order = 1, cols, header, imageKey, imageAlt, markdownContent } = Astro.props;

const buildingData = await getBuildingData(name);

const importedImage = await import(`../../../assets/images/wiki/gui/buildings/${buildingData.id}/${imageKey}.png`).then(
  (f) => f.default
);

const processor = await createMarkdownProcessor();
const headerContent = header
  ? await processor.render(`The ${TAB_INDEXES[order - 1]} tab of the GUI is the **${header}**.`)
  : undefined;
const content = markdownContent ? await processor.render(markdownContent) : undefined;
---

<InternalContentBlock cols={cols}>
  <Image slot="left" src={importedImage} alt={`${imageAlt} tab of the ${buildingData.data.name} it's GUI`} />
  {headerContent && <Fragment set:html={headerContent.code} />}
  <slot name="before-content" />
  {content && <Fragment set:html={content.code} />}
  <slot />
</InternalContentBlock>
