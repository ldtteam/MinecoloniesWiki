---
import type { CollectionEntry } from 'astro:content';
import { getEntry } from 'astro:content';

import { parseResourceLocation, toTitleCase } from '../../../util/string';
import BuildingName from '../BuildingName.astro';

interface Props {
  requirement: NonNullable<CollectionEntry<'research'>['data']['requirements']>[number];
}

const { requirement } = Astro.props;

async function getItemName(item: string) {
  const parsed = parseResourceLocation(item);
  if (parsed === undefined) {
    return item;
  }
  if (parsed.namespace !== 'minecraft') {
    const pageData = await getEntry('wiki', 'items/' + parsed.id);
    if (pageData && pageData.data.type === 'page') {
      return pageData.data.title;
    }
  }
  return toTitleCase(parsed.id.replaceAll('_', ' '));
}

function getItemLink(item: string) {
  const parsed = parseResourceLocation(item);
  if (parsed === undefined) {
    return undefined;
  }
  if (parsed.namespace === 'minecraft') {
    return 'https://minecraft.wiki/w/' + parsed.id;
  }
  return '/wiki/items/' + parsed.id;
}
---

{
  requirement.type === 'building' && (
    <li>
      <span>One or multiple&nbsp;</span>
      <BuildingName name={requirement.building.id} plural />
      <span>&nbsp;totaling at least {requirement.level} levels</span>
    </li>
  )
}

{
  requirement.type === 'item' && (
    <li>
      <b>{requirement.quantity}</b>x&nbsp;
      <span>
        {requirement.items.map(async (item) => {
          const name = await getItemName(item);
          const link = getItemLink(item);
          if (link !== undefined) {
            return <a href={link}>{name}</a>;
          }
          return <span>{name}</span>;
        })}
      </span>
    </li>
  )
}
