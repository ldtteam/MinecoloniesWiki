---
import BuildingName from '@components/wiki/names/BuildingName.astro';
import type { CollectionEntry } from 'astro:content';
import { getEntry } from 'astro:content';

import { formatForgeString, toTitleCase } from '../../../util/string';

interface Props {
  effect: CollectionEntry<'research'>['data']['effects'][number];
}

const { effect } = Astro.props;

const effectData = await getEntry(effect.effect);
if (effectData === undefined) {
  throw new Error(`Unknown research effect '${effect}'.`);
}

function parseFormatString(format: string, effectStrength: number, absoluteEffectStrength: number): string {
  format = formatForgeString(
    format,
    effectStrength.toString(),
    absoluteEffectStrength.toString(),
    Math.round(effectStrength * 100).toString(),
    Math.round(absoluteEffectStrength * 100).toString()
  );

  return toTitleCase(format);
}

function parseRegularEffectFormat(
  effectData: Extract<CollectionEntry<'research_effect'>['data'], { type: 'regular' }>
) {
  const format = effectData.format;
  const currentLevel = effectData.levels[effect.level - 1];
  const previousLevel = effect.level === 1 ? 0 : effectData.levels[effect.level - 2];
  const effectStrength = currentLevel - previousLevel;
  return parseFormatString(format, effectStrength, currentLevel);
}
---

{effectData.data.type === 'regular' && parseRegularEffectFormat(effectData.data)}
{
  effectData.data.type === 'building' && (
    <span>
      Unlocks <BuildingName building={await getEntry(effectData.data.building)} link />
    </span>
  )
}
