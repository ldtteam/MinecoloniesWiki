---
import Infobox from '@components/ui/infobox/Infobox.astro';
import RecipeGrid from '@components/ui/infobox/RecipeGrid.astro';
import Wrapper from '@components/ui/infobox/Wrapper.astro';
import VersionContent from '@components/version/VersionContent.astro';
import { getBuildingData, type MarkdocBuildingComponent } from '@utils/building';
import { getItemData } from '@utils/items';
import { Image } from 'astro:assets';
import { getCollection } from 'astro:content';
import { getEntry } from 'astro:content';

import BuildingName from '../BuildingName.astro';
import WorkerName from '../WorkerName.astro';

type Props = MarkdocBuildingComponent;

const { buildingId } = Astro.props;
const buildingData = await getBuildingData(buildingId ?? '');

const research = (
  await getCollection('research', (filter) =>
    filter.data.effects
      ? Object.keys(filter.data.effects).find((effect) => effect.replace('blockhut', '') === buildingId)
      : false
  )
).slice(0, 1)[0];

const workers = buildingData.data.workers ?? [];
const recipes = buildingData.data.recipes ?? [];

const itemData = await Promise.all(
  recipes.map(async (recipe) => {
    const recipeData = await getEntry('recipes', recipe);
    if (recipeData === undefined) {
      throw new Error(`Recipe '${recipe}' not found`);
    }
    return await getItemData(recipeData.data.output, true);
  })
);
---

<Wrapper class="mb-3">
  <slot />

  <Infobox slot="infobox" class="flex-shrink-1">
    <BuildingName slot="title" {...Astro.props} />

    <div class="text-center">
      {
        itemData
          .flatMap((item) => item.data)
          .map((item) => (
            <VersionContent versions={item.versions}>
              <swiper-container
                autoplay={item.icons.length > 1}
                autoplay-delay="2000"
                autoplay-pause-on-mouse-enter
                autoplay-disable-on-interaction="false"
                loop={item.icons.length > 1}
                no-swiping
                no-swiping-selector="*"
                width="300"
                style={{
                  width: '300px'
                }}
              >
                {item.icons.map((icon, index) => (
                  <swiper-slide>
                    <Image
                      data-pagefind-meta={index === 0 ? 'image[src], image_alt[alt]' : ''}
                      src={icon}
                      alt={item.name}
                      width={300}
                    />
                  </swiper-slide>
                ))}
              </swiper-container>
            </VersionContent>
          ))
      }
    </div>

    {
      workers.length !== 0 && (
        <>
          <hr />
          <div class="grid" style="--bs-columns: 2;">
            <p class="m-0">
              <b>{workers.length > 1 ? 'Workers:' : 'Worker:'}</b>
            </p>
            <div>
              {workers.map((worker) => (
                <p class="m-0">
                  <WorkerName name={worker.id} />
                </p>
              ))}
            </div>
          </div>
        </>
      )
    }

    <RecipeGrid recipes={recipes} />

    <hr />
    <p class="m-0">
      <b>Research:&nbsp;</b>
      {
        research !== undefined ? (
          <span
            set:html={`You must research "<a href="/wiki/systems/research#research_${research.id}">${research.data.name}</a>" to unlock this building!`}
          />
        ) : (
          <>No research is required for this building.</>
        )
      }
    </p>
  </Infobox>
</Wrapper>
