---
import VersionContent from '@components/version/VersionContent.astro';
import { getItemData, type ItemVersionData } from '@utils/items';
import { getSortedVersions } from '@utils/version';
import { Image } from 'astro:assets';
import { getEntry } from 'astro:content';
import type { RecipeItemEntry } from 'src/content/_wiki';

interface Props {
  items: RecipeItemEntry;
  amount?: number;
  large?: boolean;
}

const { items, amount = 1, large = false } = Astro.props;

const versions = await getSortedVersions();

let parsedItems: string[];
if (items === undefined || items === null) {
  parsedItems = [];
} else if (Array.isArray(items)) {
  parsedItems = items;
} else if (items.startsWith('tags/')) {
  const tag = await getEntry('tags', items.split('/', 2)[1]);
  parsedItems = tag ? tag.data : [];
} else {
  parsedItems = [items];
}
const itemResults = await Promise.all(parsedItems.map((item) => getItemData(item, true)));
---

{
  (
    <div class:list={['invslot', large ? 'invslot-large' : '']}>
      {versions.map((version) => {
        const itemData = itemResults
          .map((itemResult) =>
            itemResult.data.find((f) => f.versions.map((v) => v.data.order).includes(version.data.order))
          )
          .filter((f): f is ItemVersionData => f !== undefined);

        return (
          <VersionContent versions={[version]} class="w-100">
            <swiper-container
              init="false"
              autoplay
              autoplay-delay="1000"
              autoplay-pause-on-mouse-enter
              effect="fade"
              loop={itemData.length > 1}
              no-swiping
              no-swiping-selector="*"
              class="invslot-item"
              data-recipe-slot
              data-recipe-version={version.data.order}
            >
              {itemData.map((item) => (
                <swiper-slide>
                  {item.icons.map((icon) => (
                    <div class="invslot-wrapper">
                      {typeof icon === 'string' ? (
                        <img
                          src={icon}
                          alt={item.name}
                          loading="lazy"
                          decoding="async"
                          width={32}
                          height={32}
                          class="inv-sprite"
                          title={item.name}
                        />
                      ) : (
                        <Image src={icon} alt={item.name} width={32} height={32} class="inv-sprite" title={item.name} />
                      )}
                    </div>
                  ))}
                </swiper-slide>
              ))}
            </swiper-container>
          </VersionContent>
        );
      })}
      {amount > 1 && (
        <div class="invslot-stacksize">
          <span>{amount}</span>
        </div>
      )}
    </div>
  )
}

<script>
  import type { SwiperContainer } from 'swiper/element';

  function updateSwipers(version: string) {
    const swipers = document.querySelectorAll<SwiperContainer>('swiper-container[data-recipe-slot]');
    swipers.forEach((swiper) => {
      swiper.initialize();
      if (swiper.dataset.recipeVersion === version) {
        swiper.swiper.enable();
      } else {
        swiper.swiper.disable();
      }
    });
  }

  function update(mutations: MutationRecord[]) {
    for (const mutation of mutations) {
      if (
        mutation.type === 'attributes' &&
        mutation.attributeName === 'data-version' &&
        mutation.target instanceof HTMLElement
      ) {
        updateSwipers(mutation.target.dataset.version!);
      }
    }
  }

  const versionObserver = new MutationObserver(update);

  function setup() {
    versionObserver.observe(document.body, { attributes: true });
    updateSwipers(document.body.dataset.version!);
  }

  document.addEventListener('astro:page-load', setup);
</script>

<style style="scss">
  img {
    max-width: none;
  }

  .invslot {
    --invslot-size: 2em;
    display: inline-block;
    position: relative;
    width: var(--invslot-size);
    height: var(--invslot-size);
    background: #8b8b8b;
    border: 2px solid;
    border-color: #373737 #fff #fff #373737;

    &.invslot-large {
      --invslot-size: 3em;
    }

    &::before,
    &::after {
      background-color: #8b8b8b;
      content: '';
      height: 2px;
      position: absolute;
      width: 2px;
    }

    &::before {
      bottom: -2px;
      left: -2px;
    }

    &::after {
      right: -2px;
      top: -2px;
    }

    .invslot-item {
      width: 100%;
      height: 100%;
    }

    .invslot-wrapper {
      display: flex;
      justify-content: center;
      align-items: center;
      width: calc(var(--invslot-size) - 4px);
      height: calc(var(--invslot-size) - 4px);
    }

    .invslot-stacksize {
      position: absolute;
      bottom: 0;
      right: 0;
      color: #fff !important;
      text-shadow: 2px 2px 0 #3f3f3f;
      filter: dropshadow(color=#3F3F3F, offx=2, offy=2);
    }

    .inv-sprite {
      width: calc(2em - 4px);
      height: calc(2em - 4px);
    }
  }
</style>
