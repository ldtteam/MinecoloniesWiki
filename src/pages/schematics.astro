---
import SchematicPack from '@components/schematics/SchematicPack.astro';
import Layout from '@layouts/Default.astro';
import { getOverrideValue } from '@utils/override';
import { getNewestVersion } from '@utils/version';
import { getCollection } from 'astro:content';
import { Icon } from 'astro-icon/components';

const packs = (await getCollection('schematics')).toSorted((a, b) =>
  a.data.displayName.localeCompare(b.data.displayName)
);

const buildings = await getCollection('buildings');
const newestVersion = await getNewestVersion();
---

<Layout title="Schematics" fluid columns={5}>
  <div slot="left">
    <hr />

    <p class="h5 text-center">Filters</p>

    <div class="input-group flex-nowrap mb-3">
      <span class="input-group-text">
        <Icon name="material-symbols-light:search" is:inline size={20} />
      </span>
      <input id="filter-id" type="text" class="form-control" placeholder="Search for schematics..." />
    </div>

    <div class="input-group flex-nowrap mb-3">
      <span class="input-group-text">
        <Icon name="material-symbols-light:home-outline" is:inline size={20} />
      </span>
      <select id="filter-building" class="form-select">
        <option selected value="">Search for buildings...</option>
        {
          buildings.map(async (building) => (
            <option value={building.id}>{await getOverrideValue(building.data, (f) => f.name, newestVersion)}</option>
          ))
        }
      </select>
    </div>

    <div class="filters-size">
      <label for="filter-size-x" class="form-label flex-shrink-1 mb-0">Max Size</label>
      <input id="filter-size-x" type="number" class="form-control flex-grow-1" placeholder="X" />
      <input id="filter-size-y" type="number" class="form-control flex-grow-1" placeholder="Y" />
      <input id="filter-size-z" type="number" class="form-control flex-grow-1" placeholder="Z" />
    </div>

    <div class="form-check mb-3">
      <input id="filter-invisible" type="checkbox" class="form-check-input" />
      <label for="filter-invisible" class="form-check-label">Show invisible schematics</label>
    </div>

    <hr />

    <p class="h5 text-center">Schematic Packs</p>
    <div id="filter-pack">
      {
        packs.map((pack) => (
          <div class="form-check mb-3">
            <input id={`filter-pack-${pack.id}`} type="checkbox" class="form-check-input" data-pack-id={pack.id} />
            <label for={`filter-pack-${pack.id}`} class="form-check-label">
              {pack.data.displayName}
              <small class="text-secondary">({pack.data.authors.join(', ')})</small>
            </label>
          </div>
        ))
      }
    </div>

    <hr />

    <p class="text-secondary small">
      Special thanks to <b><a href="https://github.com/tomp2/minecolonies-style-explorer">tomp2</a></b> on Github for starting
      the project and contributing all the images.
    </p>
  </div>

  <div
    id="filter-list"
    data-filter-id=""
    data-filter-building=""
    data-filter-size-x=""
    data-filter-size-y=""
    data-filter-size-z=""
    data-filter-invisible="false"
    data-filter-pack=""
  >
    {packs.map((pack) => <SchematicPack pack={pack} />)}
  </div>
</Layout>

<style lang="scss">
  @use 'sass:map';
  @import '../css/bootstrap-vars.scss';

  .filters-size {
    display: flex;
    align-items: center;
    gap: map.get($spacers, 2);
    margin-bottom: map.get($spacers, 3);

    label {
      white-space: nowrap;
    }
  }

  @include media-breakpoint-up(lg) {
    .filters-size {
      flex-direction: column;
      align-items: flex-start;
    }
  }
</style>

<script>
  function trimToEmpty(value: string | undefined) {
    return value && value.trim().length > 0 ? value.trim() : undefined;
  }

  function updateFilterList() {
    const filterList = document.getElementById('filter-list')!;
    const filterId = trimToEmpty(filterList.dataset.filterId);
    const filterBuilding = trimToEmpty(filterList.dataset.filterBuilding);
    const filterSizeX = trimToEmpty(filterList.dataset.filterSizeX);
    const filterSizeY = trimToEmpty(filterList.dataset.filterSizeY);
    const filterSizeZ = trimToEmpty(filterList.dataset.filterSizeZ);
    const filterInvisible = filterList.dataset.filterInvisible === 'true';
    const filterPack = trimToEmpty(filterList.dataset.filterPack)?.split(',') ?? [];

    const cards = document.getElementsByClassName('schematic-card') as HTMLCollectionOf<HTMLDivElement>;
    for (const card of cards) {
      let matches = true;
      if (filterId !== undefined && !card.dataset.filterId!.includes(filterId)) {
        matches = false;
      }

      if (filterBuilding !== undefined && card.dataset.filterBuilding !== filterBuilding) {
        matches = false;
      }

      if (filterSizeX !== undefined && parseInt(card.dataset.filterSizeX!, 10) > parseInt(filterSizeX, 10)) {
        matches = false;
      }

      if (filterSizeY !== undefined && parseInt(card.dataset.filterSizeY!, 10) > parseInt(filterSizeY, 10)) {
        matches = false;
      }

      if (filterSizeZ !== undefined && parseInt(card.dataset.filterSizeZ!, 10) > parseInt(filterSizeZ, 10)) {
        matches = false;
      }

      if (filterInvisible === false && card.dataset.filterInvisible === 'true') {
        matches = false;
      }

      const pack = card.closest('.schematic-pack') as HTMLDivElement;

      if (filterPack.length > 0 && !filterPack.includes(pack.dataset.filterPack!)) {
        matches = false;
      }

      if (matches) {
        card.classList.remove('hide');
      } else {
        card.classList.add('hide');
      }
    }
  }

  function setup() {
    document.getElementById('filter-id')?.addEventListener('change', (ev) => {
      document.getElementById('filter-list')!.dataset.filterId = (ev.target as HTMLInputElement).value;
      updateFilterList();
    });

    document.getElementById('filter-building')?.addEventListener('change', (ev) => {
      document.getElementById('filter-list')!.dataset.filterBuilding = (ev.target as HTMLInputElement).value;
      updateFilterList();
    });

    document.getElementById('filter-size-x')?.addEventListener('change', (ev) => {
      document.getElementById('filter-list')!.dataset.filterSizeX = (ev.target as HTMLInputElement).value;
      updateFilterList();
    });

    document.getElementById('filter-size-y')?.addEventListener('change', (ev) => {
      document.getElementById('filter-list')!.dataset.filterSizeY = (ev.target as HTMLInputElement).value;
      updateFilterList();
    });

    document.getElementById('filter-size-z')?.addEventListener('change', (ev) => {
      document.getElementById('filter-list')!.dataset.filterSizeZ = (ev.target as HTMLInputElement).value;
      updateFilterList();
    });

    document.getElementById('filter-invisible')?.addEventListener('change', (ev) => {
      document.getElementById('filter-list')!.dataset.filterInvisible = '' + (ev.target as HTMLInputElement).checked;
      updateFilterList();
    });

    for (const checkbox of document.getElementById('filter-pack')?.getElementsByClassName('form-check') ?? []) {
      checkbox.addEventListener('change', (ev) => {
        const checked = (ev.target as HTMLInputElement).checked;
        const packId = (ev.target as HTMLInputElement).dataset.packId!;
        const filterList = document.getElementById('filter-list')!;
        if (checked) {
          filterList.dataset.filterPack = filterList.dataset.filterPack?.split(',').concat(packId).join(',') ?? packId;
        } else {
          filterList.dataset.filterPack =
            filterList.dataset.filterPack
              ?.split(',')
              .filter((f) => f !== packId)
              .join(',') ?? '';
        }
        updateFilterList();
      });
    }

    updateFilterList();
  }

  document.addEventListener('astro:page-load', setup);
</script>
